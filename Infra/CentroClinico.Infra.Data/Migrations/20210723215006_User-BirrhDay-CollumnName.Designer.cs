// <auto-generated />
using System;
using CentroClinico.Infra.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CentroClinico.Infra.Data.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20210723215006_User-BirrhDay-CollumnName")]
    partial class UserBirrhDayCollumnName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("CentroClinico.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("appointment_id");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_time");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<Guid>("SpecialityID")
                        .HasColumnType("char(36)")
                        .HasColumnName("speciality_id");

                    b.Property<Guid>("UnityID")
                        .HasColumnType("char(36)")
                        .HasColumnName("unity_id");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("SpecialityID");

                    b.HasIndex("UnityID");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("custumer_id");

                    b.Property<string>("InsuranceCardNumber")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("insurance_card_number");

                    b.Property<string>("InsuranceCompany")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("insurance_company");

                    b.Property<string>("InsurancePlan")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("insurance_plan");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("custumers");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("crm");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("doctors");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.DoctorSpeciality", b =>
                {
                    b.Property<Guid>("DoctorID")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<Guid>("SpecialityID")
                        .HasColumnType("char(36)")
                        .HasColumnName("speciality_id");

                    b.HasKey("DoctorID", "SpecialityID");

                    b.HasIndex("SpecialityID");

                    b.ToTable("doctor_speciality");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.DoctorUnity", b =>
                {
                    b.Property<Guid>("UnityID")
                        .HasColumnType("char(36)")
                        .HasColumnName("unity_id");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<Guid>("ID")
                        .HasColumnType("char(36)");

                    b.HasKey("UnityID", "DoctorID");

                    b.HasIndex("DoctorID");

                    b.ToTable("doctor_unity");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("employee_id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("additional_info");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("house_number");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("room_id");

                    b.Property<int>("Floor")
                        .HasColumnType("int")
                        .HasColumnName("floor");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<Guid>("UnityID")
                        .HasColumnType("char(36)")
                        .HasColumnName("unity_id");

                    b.HasKey("ID");

                    b.HasIndex("UnityID");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Speciality", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("speciality_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.ToTable("specialties");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Unity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("unity_id");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("additional_info");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("city");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("house_number");

                    b.HasKey("ID");

                    b.ToTable("unities");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_day");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("phone");

                    b.Property<int>("Profile")
                        .HasColumnType("int")
                        .HasColumnName("profile");

                    b.HasKey("ID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Speciality", "Speciality")
                        .WithMany("Appointments")
                        .HasForeignKey("SpecialityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Unity", "Unity")
                        .WithMany("Appointments")
                        .HasForeignKey("UnityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("Speciality");

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Customer", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.DoctorSpeciality", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Speciality", "Speciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.DoctorUnity", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Unities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Unity", "Unity")
                        .WithMany("Doctors")
                        .HasForeignKey("UnityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Employee", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Room", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Unity", "Unity")
                        .WithMany("Rooms")
                        .HasForeignKey("UnityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Specialties");

                    b.Navigation("Unities");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Speciality", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Unity", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
