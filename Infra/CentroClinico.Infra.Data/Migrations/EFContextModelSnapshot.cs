// <auto-generated />
using System;
using CentroClinico.Infra.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CentroClinico.Infra.Data.Migrations
{
    [DbContext(typeof(EFContext))]
    partial class EFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("CentroClinico.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnityID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("UnityID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("InsuranceCardNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("InsuranceCompany")
                        .HasColumnType("longtext");

                    b.Property<string>("InsurancePlan")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext");

                    b.Property<string>("CRM")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SpecialtyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UnityID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("SpecialtyID");

                    b.HasIndex("UnityID");

                    b.HasIndex("UserID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.DoctorSpecialty", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SpecialtyID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("SpecialtyID");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.DoctorUnity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnityID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("UnityID");

                    b.ToTable("DoctorUnities");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Employeies");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("UnityID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("UnityID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Specialty", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Unity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Unities");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<int>("Profile")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Unity", "Unity")
                        .WithMany()
                        .HasForeignKey("UnityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Customer", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Specialty", null)
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyID");

                    b.HasOne("CentroClinico.Domain.Entities.Unity", null)
                        .WithMany("Doctors")
                        .HasForeignKey("UnityID");

                    b.HasOne("CentroClinico.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.DoctorSpecialty", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.DoctorUnity", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Unities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentroClinico.Domain.Entities.Unity", "Unity")
                        .WithMany()
                        .HasForeignKey("UnityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Employee", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Room", b =>
                {
                    b.HasOne("CentroClinico.Domain.Entities.Unity", "Unity")
                        .WithMany("Rooms")
                        .HasForeignKey("UnityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Specialties");

                    b.Navigation("Unities");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("CentroClinico.Domain.Entities.Unity", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
